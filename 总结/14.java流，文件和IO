1.一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。
IO设备输入输出。

2.System.in可以读取控制台输入。

3.读取字符
import java.io.*;

public class HelloWorld {
    public static void main(String args[]) throws IOException {
        char c;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        do {
			c = (char) br.read(); //读取字符
			System.out.println(c);
		} while (c != 'q');
    }
}

4.读取字符串
import java.io.*;

public class HelloWorld {
    public static void main(String args[]) throws IOException {
        String str;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        do {
			str = br.readLine(); //读取字符串
			System.out.println(str);
		} while (!str.equals("end"));
    }
}

5.文件的读取和写入
package java01;
import java.io.*;

public class HelloWorld {
    public static void main(String[] args) throws IOException {
    	try {
			byte bWrite[] = {1,2,3};
			OutputStream os = new FileOutputStream("test.txt");  //写入文件
			for (int i = 0; i < bWrite.length; i++) {
				os.write(bWrite[i]);
			}
			os.close();
			InputStream is = new FileInputStream("test.txt"); //读取文件
			int size = is.available();
			for (int i = 0; i < size; i++) {
				System.out.println((char)is.read() + "");
			}
			is.close();
//			以上代码由于是二进制写入，可能存在乱码
		} catch (IOException  e) {
			System.out.println("exception");
		}
    }
}

6.文件读取和写入不乱码
package java01;
import java.io.*;

public class HelloWorld {
    public static void main(String[] args) throws IOException {
 
        File f = new File("a.txt");
        FileOutputStream fop = new FileOutputStream(f);
        // 构建FileOutputStream对象,文件不存在会自动新建
 
        OutputStreamWriter writer = new OutputStreamWriter(fop, "UTF-8");
        // 构建OutputStreamWriter对象,参数可以指定编码,默认为操作系统默认编码,windows上是gbk
 
        writer.append("中文输入");
        // 写入到缓冲区
 
        writer.append("\r\n");
        // 换行
 
        writer.append("English");
        // 刷新缓存冲,写入到文件,如果下面已经没有写入的内容了,直接close也会写入
 
        writer.close();
        // 关闭写入流,同时会把缓冲区内容写入文件,所以上面的注释掉
 
        fop.close();
        // 关闭输出流,释放系统资源
 
        FileInputStream fip = new FileInputStream(f);
        // 构建FileInputStream对象
 
        InputStreamReader reader = new InputStreamReader(fip, "UTF-8");
        // 构建InputStreamReader对象,编码与写入相同
 
        StringBuffer sb = new StringBuffer();
        while (reader.ready()) {
            sb.append((char) reader.read());
            // 转成char加到StringBuffer对象中
        }
        System.out.println(sb.toString());
        reader.close();
        // 关闭读取流
 
        fip.close();
        // 关闭输入流,释放系统资源
 
    }
}